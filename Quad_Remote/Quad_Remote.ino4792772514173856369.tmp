#include <nRF24L01.h>
#include <printf.h>
#include <RF24.h>
#include <RF24_config.h>

#include <SoftwareSerial.h>
#include <BlynkSimpleSerialBLE.h>

const char auth[] = "6a641f95ede44ef4b2dc25048a44f01c";
RF24 myRadio(9, 10);
//byte address[][6] = {["0"]};

bool controllerConnected = true;

struct data {
  bool shouldEmergencyStop = false;
  int isQuadTurnedOn = false;
  bool hasStartedProps = false;
  bool shouldTakeOff = false;
  bool shouldLand = false;
  bool isLanded = true;
  bool shouldStabilize = false;

  const float minSpeed = 20.0; // MINIMUM MOTOR SPEED THAT STILL SPINS THE PROPS
  const float maxSpeed = 255.0; // MAXIMUM MOTOR SPEED
  float baseSpeed = 150.0; // BASE HOVER OR FLYING MOTOR SPEED
  float currentSpeed = 0.0; // THE SPEED OF THE MOTORS ONCE QUAD IS POWERED ON
};
struct data data;


int powerPin = 8;
int landTakePin = 7;

int accelJoyPin = A0;
int dirJoyPinY = A1;
int dirJoyPinX = A2;

int currentSpeedLedPin = A4;
int isFlyingLedPin = 6;
int shouldStabilizeLedPin = 5;
int powerLedPin = A3;


WidgetLCD lcd(V9);

BlynkTimer timer;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  myRadio.begin();
  myRadio.setChannel(115);
  myRadio.setPALevel(RF24_PA_MAX);
  myRadio.setDataRate(RF24_250KBPS);
  //  myRadio.openWritingPipe(address[0]);


  pinMode(powerPin, INPUT);
  pinMode(landTakePin, INPUT);


  pinMode(accelJoyPin, INPUT);
  pinMode(dirJoyPinX, INPUT);
  pinMode(dirJoyPinY, INPUT);


  pinMode(powerLedPin, OUTPUT);
  pinMode(currentSpeedLedPin, OUTPUT);
  pinMode(isFlyingLedPin, OUTPUT);
  pinMode(shouldStabilizeLedPin, OUTPUT);

  //Blynk.begin(Serial, auth);
  //resetAppControls();
  //resetAppControlsLed();
  //timer.setInterval(1000, timer1);
}

int powerPinState = 0;
int powerPinStateLast = 0;
long int  powerPinPushTime = 0;
int  powerPinPushDuration = 0;

int landTakePinState = 0;
int landTakePinStateLast = 0;

void loop() {
  // put your main code here, to run repeatedly:
  //Blynk.run();

  float accelVal = analogRead(accelJoyPin);
  if (data.currentSpeed <= data.maxSpeed && data.currentSpeed >= 0) {
    if (accelVal > 0) {
      data.currentSpeed += accelVal / 600;
    }
    if (accelVal < 0) {
      data.currentSpeed -= accelVal / 600;
    }



  }
  Serial.println(data.currentSpeed);

  powerPinState = digitalRead(powerPin);
  if (powerPinState == LOW && powerPinStateLast == HIGH) {
    powerPinPushTime = millis();
    if (data.isQuadTurnedOn) {
      data.isQuadTurnedOn = false;
      Serial.println("TURNING OFF " + String(millis()));
    } else {
      data.isQuadTurnedOn = true;
      Serial.println("TURNING ON " + String(millis()));
    }
  } else if (powerPinState == HIGH && data.isQuadTurnedOn && !data.shouldEmergencyStop) {
    powerPinPushDuration = 0;
    powerPinPushDuration += millis() - powerPinPushTime;
    if (powerPinPushDuration > 3000) {
      data.shouldEmergencyStop = true;
      Serial.println("EMERGENCY STOP " + String(millis()));
    }
  }
  powerPinStateLast = powerPinState;

  landTakePinState = digitalRead(landTakePin);
  if (landTakePinState == LOW && landTakePinStateLast == HIGH) {
    if (data.isLanded) {
      data.shouldTakeOff = true;
      Serial.println("TAKING OFF " + String(millis()));
    } else {
      data.shouldLand = true;
      Serial.println("LANDING " + String(millis()));
    }
  }
  landTakePinStateLast = landTakePinState;


  digitalWrite(powerLedPin, data.isQuadTurnedOn);
  analogWrite(currentSpeedLedPin, data.currentSpeed);
  digitalWrite(isFlyingLedPin, !data.isLanded);
  digitalWrite(shouldStabilizeLedPin, data.shouldStabilize);;

  // myRadio.write(&data, sizeof(data));
  // delay(1000);
}

BLYNK_CONNECTED() {
  lcd.print(0, 0, "Blynk Connected.");
}

BLYNK_APP_CONNECTED() {
  lcd.print(0, 0, "App Connected.");
}

BLYNK_WRITE(V0) {
  // IF QUAD IS FLYING AND ISN'T TURNED ON
  data.isQuadTurnedOn = param.asInt();
  Blynk.virtualWrite(V10, data.isQuadTurnedOn * 255);



}

int sliderVal;
BLYNK_WRITE(V1) {
  sliderVal = param.asInt();
  if (data.isQuadTurnedOn && sliderVal != 1 & sliderVal != 2) {
    data.currentSpeed = sliderVal;

    if (data.currentSpeed > data.baseSpeed) {
      data.isLanded = false;
    } else if (data.currentSpeed < data.baseSpeed / 2) {
      data.isLanded = true;
    }
    if (data.currentSpeed > data.minSpeed) {
      data.shouldStabilize = true;
    } else {
      data.shouldStabilize = false;
    }
  } else {
    resetAppControls();
    lcd.print(0, 0, "Quad is OFF");
  }


  /*
    if (data.isQuadTurnedOn) {
      if (param.asInt() != 1 && param.asInt() != 2) {
        //data.currentSpeed = ((data.maxSpeed - data.minSpeed) / (data.maxSpeed)) * param.asInt() + data.minSpeed;

      }
    } else { // SEPARATE IF STATEMENT USED TO AVOID SLIDER SETTING ITSELF TO 2 WHEN CONTROLLER DISCONNECTED
      resetAppControls();
    }
  */
}
BLYNK_WRITE(V2) {
  if (data.isQuadTurnedOn) {


  } else {
    resetAppControls();
    lcd.print(0, 0, "Quad is OFF");
  }
}
BLYNK_WRITE(V3) {
  if (data.isQuadTurnedOn) {


  } else {
    resetAppControls();
    lcd.print(0, 0, "Quad is OFF");
  }

}
BLYNK_WRITE(V4) {
  if (data.isQuadTurnedOn) {
    if (param.asInt() == 1 && data.isLanded) {
      data.shouldTakeOff = true;
    } else if (data.currentSpeed > data.baseSpeed / 2) {
      data.shouldLand = true;
    }
  } else {
    resetAppControls();
    lcd.print(0, 0, "Quad is OFF");
  }
}

void land() {
  // send signal to quad to land
}


void timer1() {
  lcd.clear();
  lcd.print(0, 1, String(millis() / 1000) + "s");
  timer2();
  timer3();
}
void timer2() {
  Blynk.virtualWrite(V10, data.isQuadTurnedOn * 255);
  Blynk.virtualWrite(V11, data.currentSpeed);
}
void timer3() {
  Blynk.virtualWrite(V12, !data.isLanded * 255);
  Blynk.virtualWrite(V13, data.shouldStabilize * 255);
}
void timer4() {
  Blynk.virtualWrite(V4, !data.isLanded);
  Blynk.virtualWrite(V0, data.isQuadTurnedOn);
  Blynk.virtualWrite(V1, data.currentSpeed);
}

void resetAppControls() {
  timer2();
  timer3();
  timer4();
}

void resetAppControlsLed() {
  timer2();
  timer3();
}

